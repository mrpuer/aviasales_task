{"version":3,"sources":["fonts/OpenSans-Regular.ttf","fonts/OpenSans-SemiBold.ttf","fonts/OpenSans-Light.ttf","img/logo.svg","FilterItem.jsx","Filter.jsx","Sidebar.jsx","SortItem.jsx","Sort.jsx","SearchResults.jsx","MainContent.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","FilterItemLi","styled","li","FilterItem","props","name","id","className","type","htmlFor","defaultProps","FilterItemsList","ul","Filter","SidebarWrapper","aside","Sidebar","SortItemLi","active","SortItem","isActive","SortWrapper","section","Sort","SearchResultsWrapper","main","SearchResults","MainContentWrapper","MainContent","state","React","Component","GlobalStyle","createGlobalStyle","normalize","OpenSansRegular","OpenSansSemiBold","OpenSansLight","Header","header","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,kC,w1CCI3C,IAAMC,EAAeC,UAAOC,GAAV,KA+DZC,EAAa,SAAAC,GAAU,IACnBC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,GACd,OACE,kBAACN,EAAD,KACE,yBAAKO,UAAU,YACb,2BAAOC,KAAK,WAAWF,GAAIA,IAC3B,2BAAOG,QAASH,GAAKD,MAW7BF,EAAWO,aAAe,CACxBL,KAAM,eAGOF,Q,qPCpFf,IAAMQ,EAAkBV,UAAOW,GAAV,KAqBNC,EAZA,SAAAT,GACb,OACE,kBAACO,EAAD,KACE,kBAAC,EAAD,CAAYN,KAAK,qBAAMC,GAAG,QAC1B,kBAAC,EAAD,CAAYD,KAAK,4EAAgBC,GAAG,YACpC,kBAAC,EAAD,CAAYD,KAAK,2DAAcC,GAAG,WAClC,kBAAC,EAAD,CAAYD,KAAK,2DAAcC,GAAG,YAClC,kBAAC,EAAD,CAAYD,KAAK,2DAAcC,GAAG,c,qRChBxC,IAAMQ,EAAiBb,UAAOc,MAAV,KAqBLC,EATC,SAAAZ,GACd,OACE,kBAACU,EAAD,KACE,mJACA,kBAAC,EAAD,Q,wIChBN,IAAMG,EAAahB,UAAOC,GAAV,KACM,SAAAE,GAAK,OAAKA,EAAMc,OAAS,UAAY,WAIrDC,EAAW,SAAAf,GAAU,IACjBC,EAAmBD,EAAnBC,KAAMe,EAAahB,EAAbgB,SACd,OAAO,kBAACH,EAAD,CAAYC,OAAqB,SAAbE,GAAsBf,IAQnDc,EAAST,aAAe,CACtBL,KAAM,eAGOc,Q,kUCnBf,IAAME,EAAcpB,UAAOqB,QAAV,KAwBFC,EAXF,SAAAnB,GACX,OACE,kBAACiB,EAAD,KACE,4BACE,kBAAC,EAAD,CAAUhB,KAAK,4EAAgBe,SAAS,SACxC,kBAAC,EAAD,CAAUf,KAAK,4EAAgBe,SAAS,a,8GClBhD,IAAMI,EAAuBvB,UAAOwB,KAAV,KAcXC,EATO,SAAAtB,GACpB,OACE,kBAACoB,EAAD,KACE,kBAAC,EAAD,MACA,iD,6NCRN,IAAMG,EAAqB1B,UAAOqB,QAAV,KAWHM,E,YACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,MAAQ,GAFI,E,sEAMjB,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAViCG,IAAMC,W,muBCN/C,IAAMC,EAAcC,4BAAH,IACbC,YAIWC,IAKAC,IAKAC,KAiBTC,EAASrC,UAAOsC,OAAV,KAiBGC,MAZf,WACE,OACE,oCACE,kBAACR,EAAD,MACA,kBAACM,EAAD,KACE,yBAAKG,IAAKC,IAAMC,IAAI,oBAEtB,kBAAC,EAAD,QC1CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5037f24c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/OpenSans-Regular.3ed9575d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/OpenSans-SemiBold.ba5cde21.ttf\";","module.exports = __webpack_public_path__ + \"static/media/OpenSans-Light.2d0bdc8d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/logo.0c089234.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FilterItemLi = styled.li`\n  padding: 10px 20px;\n  &:hover {\n    background-color: #f1fcff;\n  }\n\n  .checkbox {\n    input[type='checkbox'] {\n      opacity: 0;\n\n      & + label::after {\n        content: none;\n      }\n\n      &:checked + label::after {\n        content: '';\n      }\n\n      &:checked + label::before {\n        border-color: #2196f3;\n      }\n\n      &:focus + label::before {\n        outline: rgb(59, 153, 252) auto 3px;\n      }\n    }\n\n    label {\n      margin-left: 20px;\n      position: relative;\n      display: inline-block;\n      width: 80%;\n\n      &::before,\n      &::after {\n        position: absolute;\n        content: '';\n        display: inline-block;\n      }\n\n      &::before {\n        left: -32px;\n        top: -2px;\n        width: 20px;\n        height: 20px;\n        border: 1px solid #9abbce;\n        border-radius: 2px;\n      }\n\n      &::after {\n        left: -26px;\n        top: 3px;\n        height: 6px;\n        width: 9px;\n        border-left: 2px solid;\n        border-bottom: 2px solid;\n        transform: rotate(-45deg);\n        color: #2196f3;\n      }\n    }\n  }\n`;\n\nconst FilterItem = props => {\n  const { name, id } = props;\n  return (\n    <FilterItemLi>\n      <div className=\"checkbox\">\n        <input type=\"checkbox\" id={id} />\n        <label htmlFor={id}>{name}</label>\n      </div>\n    </FilterItemLi>\n  );\n};\n\nFilterItem.propTypes = {\n  name: PropTypes.string,\n  id: PropTypes.string.isRequired,\n};\n\nFilterItem.defaultProps = {\n  name: 'Filter name',\n};\n\nexport default FilterItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport FilterItem from './FilterItem';\n\nconst FilterItemsList = styled.ul`\n  font-size: 13px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 20px;\n  text-transform: none;\n  padding-bottom: 10px;\n  font-family: 'Open Sans Light';\n`;\nconst Filter = props => {\n  return (\n    <FilterItemsList>\n      <FilterItem name=\"Все\" id=\"all\" />\n      <FilterItem name=\"Без пересадок\" id=\"no-stop\" />\n      <FilterItem name=\"1 пересадка\" id=\"1-stop\" />\n      <FilterItem name=\"2 пересадки\" id=\"2-stops\" />\n      <FilterItem name=\"3 пересадки\" id=\"3-stops\" />\n    </FilterItemsList>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Filter from './Filter';\n\nconst SidebarWrapper = styled.aside`\n  background: #ffffff;\n  border-radius: 5px;\n  width: 230px;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n  h3 {\n    line-height: 12px;\n    padding:  20px 20px 10px 20px;\n    font-size: 12px;\n  }\n`;\n\nconst Sidebar = props => {\n  return (\n    <SidebarWrapper>\n      <h3>Количество пересадок</h3>\n      <Filter />\n    </SidebarWrapper>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst SortItemLi = styled.li`\n  background-color: ${props => (props.active ? '#2196F3' : 'white')};\n  text-align: center;\n  width: 100%;\n`;\nconst SortItem = props => {\n  const { name, isActive } = props;\n  return <SortItemLi active={isActive === 'true'}>{name}</SortItemLi>;\n};\n\nSortItem.propTypes = {\n  name: PropTypes.string,\n  isActive: PropTypes.string.isRequired,\n};\n\nSortItem.defaultProps = {\n  name: 'Filter name',\n};\n\nexport default SortItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport SortItem from './SortItem';\n\nconst SortWrapper = styled.section`\n  border-radius: 5px;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  border: 1px solid #dfe5ec;\n  height: 48px;\n  ul {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst Sort = props => {\n  return (\n    <SortWrapper>\n      <ul>\n        <SortItem name=\"Самый дешевый\" isActive=\"true\" />\n        <SortItem name=\"Самый быстрый\" isActive=\"false\" />\n      </ul>\n    </SortWrapper>\n  );\n};\n\nexport default Sort;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Sort from './Sort';\n\nconst SearchResultsWrapper = styled.main`\n  width: 500px;\n  margin-left: 20px;\n`;\n\nconst SearchResults = props => {\n  return (\n    <SearchResultsWrapper>\n      <Sort />\n      <section>Items List</section>\n    </SearchResultsWrapper>\n  );\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Sidebar from './Sidebar';\nimport SearchResults from './SearchResults';\n\nconst MainContentWrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  text-transform: uppercase;\n  ul {\n    list-style: none;\n    padding-left: 0;\n    margin: 0;\n  }\n`;\n\nexport default class MainContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MainContentWrapper>\n        <Sidebar />\n        <SearchResults />\n      </MainContentWrapper>\n    );\n  }\n}","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\nimport MainContent from './MainContent';\nimport OpenSansRegular from './fonts/OpenSans-Regular.ttf';\nimport OpenSansSemiBold from './fonts/OpenSans-SemiBold.ttf';\nimport OpenSansLight from './fonts/OpenSans-Light.ttf';\n\nimport logo from './img/logo.svg';\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize}\n  \n  @font-face {\n    font-family: 'Open Sans';\n    src: url(${OpenSansRegular});\n  }\n  \n  @font-face {\n    font-family: 'Open Sans Regular';\n    src: url(${OpenSansSemiBold});\n  }\n  \n   @font-face {\n    font-family: 'Open Sans Light';\n    src: url(${OpenSansLight});\n  }\n  \n  body {\n    background-color: #f3f7fa;\n    font-family: 'Open Sans Regular';\n    font-size: 12px;\n    font-style: normal;\n    color: #4A4A4A;\n    font-weight: 600;\n    letter-spacing: 0.5px;\n  }\n  h3 {\n    margin: 0;\n  }\n`;\n\nconst Header = styled.header`\n  text-align: center;\n  padding: 30px;\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Header>\n        <img src={logo} alt=\"Aviasales logo\" />\n      </Header>\n      <MainContent />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}